// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dsl.proto

package def

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryType int32

const (
	QueryType_One    QueryType = 0
	QueryType_ByIds  QueryType = 1
	QueryType_Paging QueryType = 2
)

var QueryType_name = map[int32]string{
	0: "One",
	1: "ByIds",
	2: "Paging",
}

var QueryType_value = map[string]int32{
	"One":    0,
	"ByIds":  1,
	"Paging": 2,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}

func (QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{0}
}

type PopulationOption struct {
	Related              map[int32]string `protobuf:"bytes,1,rep,name=related,proto3" json:"related,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WithCounts           bool             `protobuf:"varint,2,opt,name=withCounts,proto3" json:"withCounts,omitempty"`
	WithResources        bool             `protobuf:"varint,3,opt,name=withResources,proto3" json:"withResources,omitempty"`
	HasRelationsWith     *E               `protobuf:"bytes,4,opt,name=hasRelationsWith,proto3" json:"hasRelationsWith,omitempty"`
	HasRelationsOf       []string         `protobuf:"bytes,5,rep,name=hasRelationsOf,proto3" json:"hasRelationsOf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PopulationOption) Reset()         { *m = PopulationOption{} }
func (m *PopulationOption) String() string { return proto.CompactTextString(m) }
func (*PopulationOption) ProtoMessage()    {}
func (*PopulationOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{0}
}

func (m *PopulationOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopulationOption.Unmarshal(m, b)
}
func (m *PopulationOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopulationOption.Marshal(b, m, deterministic)
}
func (m *PopulationOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopulationOption.Merge(m, src)
}
func (m *PopulationOption) XXX_Size() int {
	return xxx_messageInfo_PopulationOption.Size(m)
}
func (m *PopulationOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PopulationOption.DiscardUnknown(m)
}

var xxx_messageInfo_PopulationOption proto.InternalMessageInfo

func (m *PopulationOption) GetRelated() map[int32]string {
	if m != nil {
		return m.Related
	}
	return nil
}

func (m *PopulationOption) GetWithCounts() bool {
	if m != nil {
		return m.WithCounts
	}
	return false
}

func (m *PopulationOption) GetWithResources() bool {
	if m != nil {
		return m.WithResources
	}
	return false
}

func (m *PopulationOption) GetHasRelationsWith() *E {
	if m != nil {
		return m.HasRelationsWith
	}
	return nil
}

func (m *PopulationOption) GetHasRelationsOf() []string {
	if m != nil {
		return m.HasRelationsOf
	}
	return nil
}

type EntityQuery struct {
	Qt                   QueryType          `protobuf:"varint,1,opt,name=qt,proto3,enum=def.QueryType" json:"qt,omitempty"`
	Type                 string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Ids                  []string           `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	PopOp                *PopulationOption  `protobuf:"bytes,5,opt,name=popOp,proto3" json:"popOp,omitempty"`
	User                 *EX                `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Action               string             `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	Queries              []*Query           `protobuf:"bytes,8,rep,name=queries,proto3" json:"queries,omitempty"`
	Sorts                map[string]SortDir `protobuf:"bytes,9,rep,name=sorts,proto3" json:"sorts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=def.SortDir"`
	FromID               string             `protobuf:"bytes,10,opt,name=fromID,proto3" json:"fromID,omitempty"`
	WithLimit            int32              `protobuf:"varint,11,opt,name=withLimit,proto3" json:"withLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EntityQuery) Reset()         { *m = EntityQuery{} }
func (m *EntityQuery) String() string { return proto.CompactTextString(m) }
func (*EntityQuery) ProtoMessage()    {}
func (*EntityQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{1}
}

func (m *EntityQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityQuery.Unmarshal(m, b)
}
func (m *EntityQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityQuery.Marshal(b, m, deterministic)
}
func (m *EntityQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityQuery.Merge(m, src)
}
func (m *EntityQuery) XXX_Size() int {
	return xxx_messageInfo_EntityQuery.Size(m)
}
func (m *EntityQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityQuery.DiscardUnknown(m)
}

var xxx_messageInfo_EntityQuery proto.InternalMessageInfo

func (m *EntityQuery) GetQt() QueryType {
	if m != nil {
		return m.Qt
	}
	return QueryType_One
}

func (m *EntityQuery) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EntityQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EntityQuery) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *EntityQuery) GetPopOp() *PopulationOption {
	if m != nil {
		return m.PopOp
	}
	return nil
}

func (m *EntityQuery) GetUser() *EX {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *EntityQuery) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EntityQuery) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *EntityQuery) GetSorts() map[string]SortDir {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *EntityQuery) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *EntityQuery) GetWithLimit() int32 {
	if m != nil {
		return m.WithLimit
	}
	return 0
}

type EntityCreate struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	E_                   *E       `protobuf:"bytes,2,opt,name=e_,json=e,proto3" json:"e_,omitempty"`
	Related_             []*EX    `protobuf:"bytes,3,rep,name=related_,json=related,proto3" json:"related_,omitempty"`
	Resources_           []*E     `protobuf:"bytes,4,rep,name=resources_,json=resources,proto3" json:"resources_,omitempty"`
	User                 *EX      `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Action               string   `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityCreate) Reset()         { *m = EntityCreate{} }
func (m *EntityCreate) String() string { return proto.CompactTextString(m) }
func (*EntityCreate) ProtoMessage()    {}
func (*EntityCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{2}
}

func (m *EntityCreate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityCreate.Unmarshal(m, b)
}
func (m *EntityCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityCreate.Marshal(b, m, deterministic)
}
func (m *EntityCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityCreate.Merge(m, src)
}
func (m *EntityCreate) XXX_Size() int {
	return xxx_messageInfo_EntityCreate.Size(m)
}
func (m *EntityCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityCreate.DiscardUnknown(m)
}

var xxx_messageInfo_EntityCreate proto.InternalMessageInfo

func (m *EntityCreate) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EntityCreate) GetE_() *E {
	if m != nil {
		return m.E_
	}
	return nil
}

func (m *EntityCreate) GetRelated_() []*EX {
	if m != nil {
		return m.Related_
	}
	return nil
}

func (m *EntityCreate) GetResources_() []*E {
	if m != nil {
		return m.Resources_
	}
	return nil
}

func (m *EntityCreate) GetUser() *EX {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *EntityCreate) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type RelationQuery struct {
	Type                 string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	OfID                 *EX               `protobuf:"bytes,2,opt,name=ofID,proto3" json:"ofID,omitempty"`
	Relation             string            `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	User                 *EX               `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	PopOp                *PopulationOption `protobuf:"bytes,5,opt,name=popOp,proto3" json:"popOp,omitempty"`
	FromID               string            `protobuf:"bytes,6,opt,name=fromID,proto3" json:"fromID,omitempty"`
	WithLimit            int32             `protobuf:"varint,7,opt,name=withLimit,proto3" json:"withLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RelationQuery) Reset()         { *m = RelationQuery{} }
func (m *RelationQuery) String() string { return proto.CompactTextString(m) }
func (*RelationQuery) ProtoMessage()    {}
func (*RelationQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{3}
}

func (m *RelationQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelationQuery.Unmarshal(m, b)
}
func (m *RelationQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelationQuery.Marshal(b, m, deterministic)
}
func (m *RelationQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationQuery.Merge(m, src)
}
func (m *RelationQuery) XXX_Size() int {
	return xxx_messageInfo_RelationQuery.Size(m)
}
func (m *RelationQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RelationQuery proto.InternalMessageInfo

func (m *RelationQuery) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RelationQuery) GetOfID() *EX {
	if m != nil {
		return m.OfID
	}
	return nil
}

func (m *RelationQuery) GetRelation() string {
	if m != nil {
		return m.Relation
	}
	return ""
}

func (m *RelationQuery) GetUser() *EX {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RelationQuery) GetPopOp() *PopulationOption {
	if m != nil {
		return m.PopOp
	}
	return nil
}

func (m *RelationQuery) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *RelationQuery) GetWithLimit() int32 {
	if m != nil {
		return m.WithLimit
	}
	return 0
}

type RelationCreate struct {
	From_                *EX      `protobuf:"bytes,1,opt,name=from_,json=from,proto3" json:"from_,omitempty"`
	To_                  *EX      `protobuf:"bytes,2,opt,name=to_,json=to,proto3" json:"to_,omitempty"`
	Verb_                string   `protobuf:"bytes,3,opt,name=verb_,json=verb,proto3" json:"verb_,omitempty"`
	User                 *EX      `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	IsAdd_               bool     `protobuf:"varint,5,opt,name=isAdd_,json=isAdd,proto3" json:"isAdd_,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationCreate) Reset()         { *m = RelationCreate{} }
func (m *RelationCreate) String() string { return proto.CompactTextString(m) }
func (*RelationCreate) ProtoMessage()    {}
func (*RelationCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{4}
}

func (m *RelationCreate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelationCreate.Unmarshal(m, b)
}
func (m *RelationCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelationCreate.Marshal(b, m, deterministic)
}
func (m *RelationCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationCreate.Merge(m, src)
}
func (m *RelationCreate) XXX_Size() int {
	return xxx_messageInfo_RelationCreate.Size(m)
}
func (m *RelationCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationCreate.DiscardUnknown(m)
}

var xxx_messageInfo_RelationCreate proto.InternalMessageInfo

func (m *RelationCreate) GetFrom_() *EX {
	if m != nil {
		return m.From_
	}
	return nil
}

func (m *RelationCreate) GetTo_() *EX {
	if m != nil {
		return m.To_
	}
	return nil
}

func (m *RelationCreate) GetVerb_() string {
	if m != nil {
		return m.Verb_
	}
	return ""
}

func (m *RelationCreate) GetUser() *EX {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RelationCreate) GetIsAdd_() bool {
	if m != nil {
		return m.IsAdd_
	}
	return false
}

func init() {
	proto.RegisterEnum("def.QueryType", QueryType_name, QueryType_value)
	proto.RegisterType((*PopulationOption)(nil), "def.PopulationOption")
	proto.RegisterMapType((map[int32]string)(nil), "def.PopulationOption.RelatedEntry")
	proto.RegisterType((*EntityQuery)(nil), "def.EntityQuery")
	proto.RegisterMapType((map[string]SortDir)(nil), "def.EntityQuery.SortsEntry")
	proto.RegisterType((*EntityCreate)(nil), "def.EntityCreate")
	proto.RegisterType((*RelationQuery)(nil), "def.RelationQuery")
	proto.RegisterType((*RelationCreate)(nil), "def.RelationCreate")
}

func init() { proto.RegisterFile("dsl.proto", fileDescriptor_3e64ff22355f731d) }

var fileDescriptor_3e64ff22355f731d = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6a, 0xdb, 0x4e,
	0x10, 0xfe, 0x49, 0xb2, 0x64, 0x6b, 0xec, 0x18, 0xff, 0x26, 0x4d, 0x59, 0x9c, 0x10, 0x8c, 0x49,
	0x5b, 0x93, 0x80, 0x21, 0xee, 0xa5, 0x84, 0x5e, 0xda, 0xd8, 0x85, 0x40, 0xc0, 0xa9, 0x52, 0x68,
	0x6f, 0x46, 0x89, 0xd6, 0x89, 0xa8, 0x23, 0xc9, 0xd2, 0x3a, 0x45, 0x6f, 0xd0, 0x6b, 0xef, 0x7d,
	0x86, 0xde, 0xfb, 0x2e, 0x7d, 0x98, 0xb2, 0xb3, 0xfa, 0x17, 0xd7, 0x0d, 0xf4, 0x12, 0x34, 0x33,
	0xdf, 0xcc, 0x7c, 0x33, 0xdf, 0x6c, 0x0c, 0xb6, 0x97, 0x2c, 0x86, 0x51, 0x1c, 0x8a, 0x10, 0x0d,
	0x8f, 0xcf, 0xbb, 0xb6, 0xc7, 0xe7, 0xca, 0xee, 0xff, 0xd0, 0xa1, 0x73, 0x11, 0x46, 0xab, 0x85,
	0x2b, 0xfc, 0x30, 0x98, 0x46, 0xf2, 0x2f, 0xbe, 0x86, 0x7a, 0xcc, 0x17, 0xae, 0xe0, 0x1e, 0xd3,
	0x7a, 0xc6, 0xa0, 0x39, 0xea, 0x0f, 0x65, 0xc6, 0x3a, 0x6e, 0xe8, 0x28, 0xd0, 0x24, 0x10, 0x71,
	0xea, 0xe4, 0x29, 0xb8, 0x0f, 0xf0, 0xc5, 0x17, 0xb7, 0xa7, 0xe1, 0x2a, 0x10, 0x09, 0xd3, 0x7b,
	0xda, 0xa0, 0xe1, 0x54, 0x3c, 0x78, 0x00, 0x5b, 0xd2, 0x72, 0x78, 0x12, 0xae, 0xe2, 0x6b, 0x9e,
	0x30, 0x83, 0x20, 0x0f, 0x9d, 0x38, 0x82, 0xce, 0xad, 0x9b, 0x50, 0x07, 0x3f, 0x0c, 0x92, 0x8f,
	0xbe, 0xb8, 0x65, 0xb5, 0x9e, 0x36, 0x68, 0x8e, 0x2c, 0x22, 0x33, 0x71, 0xfe, 0x88, 0xe3, 0x73,
	0x68, 0x57, 0x7d, 0xd3, 0x39, 0x33, 0x7b, 0xc6, 0xc0, 0x76, 0xd6, 0xbc, 0xdd, 0x13, 0x68, 0x55,
	0xa9, 0x63, 0x07, 0x8c, 0xcf, 0x3c, 0x65, 0x5a, 0x4f, 0x1b, 0x98, 0x8e, 0xfc, 0xc4, 0x27, 0x60,
	0xde, 0xbb, 0x8b, 0x15, 0x27, 0xfa, 0xb6, 0xa3, 0x8c, 0x13, 0xfd, 0x95, 0xd6, 0xff, 0x6e, 0x40,
	0x73, 0x12, 0x08, 0x5f, 0xa4, 0xef, 0x57, 0x3c, 0x4e, 0x71, 0x1f, 0xf4, 0xa5, 0xa0, 0xd4, 0xf6,
	0xa8, 0x4d, 0xcc, 0xc8, 0xff, 0x21, 0x8d, 0xb8, 0xa3, 0x2f, 0x05, 0x22, 0xd4, 0x44, 0x1a, 0xe5,
	0x85, 0xe8, 0x1b, 0xdb, 0xa0, 0xfb, 0x1e, 0x8d, 0x6d, 0x3b, 0xba, 0xef, 0xc9, 0xfe, 0xbe, 0x97,
	0xb0, 0x1a, 0x91, 0x95, 0x9f, 0x78, 0x04, 0x66, 0x14, 0x46, 0xd3, 0x88, 0x99, 0x34, 0xf2, 0xce,
	0xc6, 0xfd, 0x3b, 0x0a, 0x83, 0xbb, 0x50, 0x5b, 0x25, 0x3c, 0x66, 0x16, 0x61, 0xeb, 0x6a, 0x3d,
	0x9f, 0x1c, 0x72, 0xe2, 0x53, 0xb0, 0xdc, 0x6b, 0x89, 0x66, 0x75, 0xea, 0x97, 0x59, 0x78, 0x00,
	0xf5, 0xe5, 0x8a, 0xc7, 0x3e, 0x4f, 0x58, 0x83, 0x34, 0x86, 0x92, 0xbc, 0x93, 0x87, 0xf0, 0x18,
	0xcc, 0x24, 0x8c, 0x45, 0xc2, 0x6c, 0xc2, 0xec, 0xaa, 0xda, 0xe5, 0xf8, 0xc3, 0x4b, 0x19, 0x55,
	0x07, 0xa0, 0x90, 0xb2, 0xe1, 0x3c, 0x0e, 0xef, 0xce, 0xc6, 0x0c, 0x54, 0x43, 0x65, 0xe1, 0x1e,
	0xd8, 0x52, 0xe1, 0x73, 0xff, 0xce, 0x17, 0xac, 0x49, 0xab, 0x2e, 0x1d, 0xdd, 0x77, 0x00, 0x65,
	0xa9, 0xaa, 0x20, 0xb6, 0x12, 0xa4, 0x5f, 0x15, 0xa4, 0x3d, 0x6a, 0x11, 0x11, 0x99, 0x31, 0xf6,
	0xe3, 0xaa, 0x3c, 0x3f, 0x35, 0x68, 0x29, 0x7e, 0xa7, 0x31, 0x77, 0x05, 0x2f, 0xf6, 0xaf, 0x55,
	0xf6, 0xbf, 0x03, 0x3a, 0x9f, 0x51, 0xa5, 0xf2, 0x9a, 0x34, 0x8e, 0x7d, 0x68, 0x64, 0x37, 0x3c,
	0x63, 0x06, 0xcd, 0x5b, 0xec, 0xb2, 0x38, 0xee, 0x67, 0x00, 0x71, 0x7e, 0xa3, 0x33, 0x52, 0xac,
	0x2c, 0x61, 0x17, 0x91, 0x42, 0x12, 0xf3, 0x71, 0x49, 0xac, 0xaa, 0x24, 0xfd, 0x5f, 0x1a, 0x6c,
	0xe5, 0x67, 0xaa, 0x8e, 0x6b, 0x13, 0xf9, 0x5d, 0xa8, 0x85, 0xf3, 0xb3, 0x71, 0x46, 0xbf, 0x2c,
	0x2d, 0x9d, 0xd8, 0xcd, 0x46, 0x90, 0xc5, 0xd5, 0x7d, 0x15, 0x76, 0xc1, 0xa9, 0xb6, 0x89, 0xd3,
	0x3f, 0x1d, 0x5c, 0x29, 0xb1, 0xf5, 0x77, 0x89, 0xeb, 0x6b, 0x12, 0xf7, 0xbf, 0x69, 0xd0, 0xce,
	0xc7, 0xcb, 0xc4, 0xd9, 0x03, 0x53, 0xa6, 0xce, 0x68, 0xc0, 0x2a, 0x27, 0xe9, 0x45, 0x06, 0x86,
	0x08, 0x67, 0xeb, 0x83, 0xea, 0x22, 0xc4, 0x6d, 0x30, 0xef, 0x79, 0x7c, 0x35, 0xcb, 0x66, 0xac,
	0x49, 0xe3, 0xf1, 0xf9, 0x76, 0xc0, 0xf2, 0x93, 0x37, 0x9e, 0x37, 0xa3, 0x01, 0x1b, 0x8e, 0x49,
	0xd6, 0xe1, 0x11, 0xd8, 0xc5, 0x73, 0xc5, 0x3a, 0x18, 0xd3, 0x80, 0x77, 0xfe, 0x43, 0x1b, 0xcc,
	0xb7, 0xe9, 0x99, 0x97, 0x74, 0x34, 0x04, 0xb0, 0x2e, 0xdc, 0x1b, 0x3f, 0xb8, 0xe9, 0xe8, 0xa3,
	0xaf, 0x3a, 0x18, 0xe3, 0xcb, 0x73, 0xec, 0x81, 0x11, 0x06, 0x1c, 0x3b, 0xeb, 0x8f, 0xa1, 0x9b,
	0xf7, 0xc4, 0x03, 0x7a, 0xd0, 0x1b, 0x10, 0xcd, 0x0c, 0x71, 0xee, 0x27, 0x02, 0x5f, 0x80, 0x19,
	0xb9, 0x37, 0xdc, 0xdb, 0x80, 0x6b, 0x65, 0xb8, 0x0b, 0x8a, 0x1f, 0x42, 0xeb, 0x9a, 0x16, 0xa6,
	0x20, 0xf8, 0x7f, 0x05, 0xaf, 0x36, 0x59, 0xb6, 0x3e, 0x86, 0xad, 0x25, 0xbd, 0xe1, 0x5c, 0x76,
	0xa4, 0xc8, 0x83, 0xbb, 0x5a, 0x2b, 0x7f, 0x0c, 0x6d, 0x55, 0xbe, 0xc8, 0xd9, 0x7e, 0x90, 0x93,
	0xb5, 0x50, 0xff, 0x20, 0x26, 0x77, 0x91, 0x48, 0xaf, 0x2c, 0xfa, 0xf5, 0x78, 0xf9, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x65, 0x77, 0xe6, 0x13, 0x5a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DSLClient is the client API for DSL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSLClient interface {
	One(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EX, error)
	Ids(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EXList, error)
	Paged(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EXPaged, error)
	CreateEntity(ctx context.Context, in *EntityCreate, opts ...grpc.CallOption) (*EX, error)
	QueryRelation(ctx context.Context, in *RelationQuery, opts ...grpc.CallOption) (*EXPaged, error)
	CreateRelation(ctx context.Context, in *RelationCreate, opts ...grpc.CallOption) (*Empty, error)
}

type dSLClient struct {
	cc *grpc.ClientConn
}

func NewDSLClient(cc *grpc.ClientConn) DSLClient {
	return &dSLClient{cc}
}

func (c *dSLClient) One(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EX, error) {
	out := new(EX)
	err := c.cc.Invoke(ctx, "/def.DSL/one", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSLClient) Ids(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EXList, error) {
	out := new(EXList)
	err := c.cc.Invoke(ctx, "/def.DSL/ids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSLClient) Paged(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EXPaged, error) {
	out := new(EXPaged)
	err := c.cc.Invoke(ctx, "/def.DSL/paged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSLClient) CreateEntity(ctx context.Context, in *EntityCreate, opts ...grpc.CallOption) (*EX, error) {
	out := new(EX)
	err := c.cc.Invoke(ctx, "/def.DSL/createEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSLClient) QueryRelation(ctx context.Context, in *RelationQuery, opts ...grpc.CallOption) (*EXPaged, error) {
	out := new(EXPaged)
	err := c.cc.Invoke(ctx, "/def.DSL/queryRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSLClient) CreateRelation(ctx context.Context, in *RelationCreate, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/def.DSL/createRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSLServer is the server API for DSL service.
type DSLServer interface {
	One(context.Context, *EntityQuery) (*EX, error)
	Ids(context.Context, *EntityQuery) (*EXList, error)
	Paged(context.Context, *EntityQuery) (*EXPaged, error)
	CreateEntity(context.Context, *EntityCreate) (*EX, error)
	QueryRelation(context.Context, *RelationQuery) (*EXPaged, error)
	CreateRelation(context.Context, *RelationCreate) (*Empty, error)
}

// UnimplementedDSLServer can be embedded to have forward compatible implementations.
type UnimplementedDSLServer struct {
}

func (*UnimplementedDSLServer) One(ctx context.Context, req *EntityQuery) (*EX, error) {
	return nil, status.Errorf(codes.Unimplemented, "method One not implemented")
}
func (*UnimplementedDSLServer) Ids(ctx context.Context, req *EntityQuery) (*EXList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ids not implemented")
}
func (*UnimplementedDSLServer) Paged(ctx context.Context, req *EntityQuery) (*EXPaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paged not implemented")
}
func (*UnimplementedDSLServer) CreateEntity(ctx context.Context, req *EntityCreate) (*EX, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedDSLServer) QueryRelation(ctx context.Context, req *RelationQuery) (*EXPaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRelation not implemented")
}
func (*UnimplementedDSLServer) CreateRelation(ctx context.Context, req *RelationCreate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}

func RegisterDSLServer(s *grpc.Server, srv DSLServer) {
	s.RegisterService(&_DSL_serviceDesc, srv)
}

func _DSL_One_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLServer).One(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/def.DSL/One",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLServer).One(ctx, req.(*EntityQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSL_Ids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLServer).Ids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/def.DSL/Ids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLServer).Ids(ctx, req.(*EntityQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSL_Paged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLServer).Paged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/def.DSL/Paged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLServer).Paged(ctx, req.(*EntityQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSL_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/def.DSL/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLServer).CreateEntity(ctx, req.(*EntityCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSL_QueryRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLServer).QueryRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/def.DSL/QueryRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLServer).QueryRelation(ctx, req.(*RelationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSL_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/def.DSL/CreateRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLServer).CreateRelation(ctx, req.(*RelationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "def.DSL",
	HandlerType: (*DSLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "one",
			Handler:    _DSL_One_Handler,
		},
		{
			MethodName: "ids",
			Handler:    _DSL_Ids_Handler,
		},
		{
			MethodName: "paged",
			Handler:    _DSL_Paged_Handler,
		},
		{
			MethodName: "createEntity",
			Handler:    _DSL_CreateEntity_Handler,
		},
		{
			MethodName: "queryRelation",
			Handler:    _DSL_QueryRelation_Handler,
		},
		{
			MethodName: "createRelation",
			Handler:    _DSL_CreateRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl.proto",
}
